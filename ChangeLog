r23:
installer improvements

r22:
chikuzen's genericfilters plugin is now bundled with the installer
the installer will now refuse to run if the 32 and 64 bit python installation directory is the same or if python wasn't installed for all users
fixed a rare bug on x64 windows that could cause crashes in a few internal functions with asm
list_functions() now sorts function names alphabetically and plugins by their unique identifier
fixed memory leaks when per frame errors happen in several filters
the resize filter now reports more errors at construction time
shuffleplanes format argument renamed to colorfamily to make more sense
it's now possible to set a custom debug message handler from python, also a bug happening when setting a custom handler was fixed
added makediff and mergediff functions
the installer will no longer prompt about closing applications unless it's really necessary
vspipe now prints the fps as well
now arguments that are None in python aren't passed on to functions, this makes supplying defaults a lot easier
added core.version_number() so scripts can easily check for a supported core version
improved multithreaded locking, almost all functions in the vsscript and core API should be completely thread-safe now
Lut2, Merge and MaskedMerge functions changed, they now take two clip arguments named clipa and clipb instead of a 2 clip array, the old version is accepted as well for now, do vs.get_core(r21_arg_compat=False) to disable backward compatibility
minor API change, filters will no longer receive requests for frames beyond the end of a clip, instead the requested frame number is truncated, unknown length clip behavior is unchanged
simplified the vsscript api sample to use getFrame() and to be pure C code
added VS2013 projects
runtime registered formats now get automatically generated names so they're easier to identify
there should longer be "an exception happened when handling an exception" errors in python to keep the backtrace clearer
the python module now accepts any iterable as an array input
completely removed the Qt dependency (with some help from nodame on linux)
added clense and the missing modes to removegrainvs
switched to C++11/C99 and VS2013, this means that both the VS2010 and VS2013 runtimes are both installed
added a port of vinverse (lachs0r)

r21:
added additional checks to verify that plugin writers don't do things wrong
code cleanups and reorganization, simplefilters.c was split into several files
the fpn_num and fps_den clip properties are no longer truncated to int in python
fixed setting maximum memory use over 2GB from python
added an additional output format argument to modifyframe, also added checks to prevent crashes
now completely rejects adding known to be hopelessly broken functions from avisynth plugins (removegrain/repair/iscombed/colormatrix)
now properly flips compatrgb32 when converting, previously conversions to/from would make the picture upside down
optimized 8 bit merge and maskedmerge
fixed crash bugs in planeaverage/difference/cliptoprop/proptoclip introduced in r20
now flattens frame properties as well, this is the proper documented behavior
merged all selectclip functionality into frameeval, selectclip was removed as a separate function
vsvfw now returns a clip with the error message if there's an error
added a basic text printing filter to the core, code written by nodame
it's now possible to use dir() on frame.props and core.namespace in python to list interesting properties and attributes
added a compiled version of assvapour, it's probably a bit broken when it comes to font selection at the moment
ported removegrain/repair based on dither tools' code, support 8-16 bit input
fixed a cache issues where it would shrink to far too small sizes
fixed several bugs in shuffleplanes, now it will correctly deduce the dimensions of the output in more cases and properly reject variable size/format input
fixed a rare hang that could happen in avisynth compatibility when only using one thread
adjusted avisynth compat prefetching lists, specifically MCompensate should be faster now

r20:
minor api change, a copy of all filter arguments is no longer kept around unless cleared, shouldn't affect any existing filters
fixed a bug that would cause avisynth filters without specified prefetching to crash
renamed the api functions getPluginNs/Id to getPluginByNs/Id since they make more sense
rewrote the ugliest threading code, the locking is now a bit more fine grained in general
added frameeval, a function to allow per frame filter evaluation
blankclip now generates a new frame on every request to keep memory usage down, added the keep argument to optionally always return the same frame
the message handler now takes an extra user data pointer, the handler and data pointer is still per process instead of per core though
added plugin autoloading for linux (jackoneill)
added plugin autoloading for windows, autoloaded plugins for all users go into <installdir>\plugins and per user autoloaded plugins go into <appdata>\vapoursynth\plugins
include the python backtrace in errors when available
fixed a bug in the propagation of filter errors, requesting a frame with an error twice no longer makes vapoursynth hang
fixed the error that happens when avisource is used to open a vs script inside a vs script
added override support to vdecimate (nodame)
added -version option to vspipe and other small fixes
addborders now properly rejects clips where the colorspace can change
addborders and blankclip now properly default to black for all colorspaces
added tdeint properly to the prefetch list
fixed a cache bug that would make caches adapt too slowly/not at all
only output the first 200 slow warnings per avisynth filter
don't prefetch any frames by default for avisynth filters

r19:
lut/lut2 now processes all planes by default
ported to work on arm and powerpc (Zor)
fixed 9-16 bit format support in Expr
properly initialize color in addborders to 0
calls to the getFrame() function inside vapoursynth can never deadlock now, the thread handling is also slightly improved
fixed a bug in the cache that would stop it from freeing all its frames when memory is needed, fixes an out of memory error reported by Chikuzen
output is no longer determined by setting the last variable in __main__, instead clip.set_output(int index = 0) is used to set which clip(s) are exported
fixed some memory leaks in the internal filters when they're freed (jackoneill)
now properly initializes blankclips to all 0 when no values are given
added proper const declarations now that cython supports it, cython 0.18 or later required to build the extension now
fixed get_write_ptr() in python to actually return a write pointer
fixed the lut and lut2 filters for > 8 bit formats (ADub)
various minor fixes to vivtc
removed clip.output() since it's a bad design decision, now a command-line program called vspipe can be used to pipe or write raw video output
renamed newMap() to createMap() to match the naming of all other functions
added core.get_plugins() for the core and core.namepace.get_functions() for namespaces, it works similarly to list_functions() but instead returns the information in a dict
removed the unmentioned and unused link option for filter arguments as it is completely pointless and similar functionality may be implemented anyway
there's now a sane external api available for embedding in other applications, see vsscript.h and vsvfw for an example
now a singleton pattern is used for the core in python scripts, use vs.get_core() to get a reference to it
clip.get_frame() now throws an exception when out of bounds frames are requested
fixes a reference leak in the VideoProps python class
now ignores functions with . in their argument string for avisynth compatibility, this makes warpsharp mostly compatible

r18:
the installer no longer asks for the installation type since there's only one option anyway
vdecimate now returns and decimates the frames in the last incomplete cycle as well
fixed a bug that prevented mask scaling from working in MaskedMerge
fixed a bug in VSFS that made the module crash on script errors, the full error message is now reported in a log file just like AVFS
improved the error message when the last variable hasn't been set in a script
changed default interleave behavior to match avisynth, the old and in some cases desirable behavior can be selected with the extend argument
added color argument to addborders
fixed addborders for formats with over 8 bits per sample
blankclip can now produce float clips
fixed/at least greatly reduced the big memory leak when reopening a script through vfw

r17:
the installer will now register and unregister the vsfs dll if selected (pismo file mount must of course be installed at the time for it to work)
cleaned up the asm in the transpose filter
fixed python detection in the installer if it was installed for a single user
vdecimate can now accept up to 16 bit integer input and all color formats (jackoneill)
fixed a bug that made the array for storing metrics uninitialized at the end in vdecimate leading to random decisions (jackoneill)
added an inappropriately named subtitle filter based on libass (lachs0r)
EEDI3 has now been changed into pure C (jackoneill)
it is now possible to have the warning/error messages handled by a user specified callback function
added a check for the SSE state so plugins cannot modify it without it being noticed (similar to the FPU and MMX checks)
fixed that two plugins could be loaded into the same namespace
fixed some issues with argument handling in python due to exceptions not being propagated properly
added the Expr filter, it can evaluate an expression per pixel during runtime for 1-3 input clips
fixed a clip reference leak introduced in R15 with the multiple clip output changes
fixed AVISource crashes due to RGB output not being properly initialized
fixed the upper memory limit check
fixed callback functions hanging in vfw and vsfs
changed the license of all files to LGPL, previously a few of them were MIT licensed

r16:
fixed a MaskedMerge reference leak under some rare conditions
added a check for CPU features on x86, will now return an error if SSE2 isn't present
fixed an issue in avisynth compatibility caused by stricter internal checks

r15:
documented all the predefined frame properties and all important python classes
fixed iterating over clips in python
allocate memory per plane instead of in one big lump, this allows planes to be copied by reference using the newVideoFrame2() function and will also reduce memory usage slightly for filters that use it
fixed infinite loop in lut and lut2 when used with 9 bit input or more 
added ClipToProp and PropToClip functions, they allow one clip to be attached to another clip as frame properties
fixed a reference leak in vivtc
ported avisource from avisynth, it has been thoroughly upgraded and can understand several high bitdepth formats including v210 which many "professional" codecs use, it is also based on the latest vdub parser code now
added len() support for clips in python
fixed a bug with plugin functions having array output in python
improved the api so that a single node/filter can produce several output clips, this bumps the api version to r3 (r2 plugins are still binary compatible but the r2 abi will also be removed in a version or two)

r14:
fixed setting the pixel values in blankclip
a collection of ported/new filters are now bundled (eedi3, vivtc, histogram and temporalsoften)
all examples and headers needed to write a new filter are now included in the installer
fixed a frame data alignment issue in VSFS
added vivtc (aka tivtc lite) to the included filters
the fpu state check now only outputs a warning instead of terminating (this is until I've been able to locate why certain people trigger it)
users can now set the cache size limit over which vs aggressively starts to decrease cache size, use core.set_max_cache_size(number of MB) (the memory use is calculated from the combined size of all framebuffers allocated)
fixed memory leaks in PlaneDifference and PlaneAverage

r13:
enabled another part of the cache size adjustment, cache sizes will now be aggressively reduced to keep framebuffer memory use below 1GB
filters can now get passed zero length arrays, the rewritten parts also improves argument handling in python (integer types now get converted to float implicitly when passed as a function argument)
added right click\new\vapoursynth script shortcut to the installer
make the number of frames in progress equal the number of threads, this should always be the upper beneficial value for any script, previously it was fixed at 10
fixed a rowsize bug in avisynth compatibility and implemented the subframe functions
added PEMVerify, a function to check for out of bounds values in filter output for developers
added PlaneDifference and PlaneAverage functions for use in conditional filtering
added copy(), and get_write_ptr() to clips in python, renamed get_data() to get_read_ptr()
greatly improved the handling of SelectClip and ModifyFrame (formerly ModifyProps), conditional filtering is now something that's usable
using ModifyFrame and a bit of cleverness it is now possible to implement fairly complex filters in python

r12:
fixed a scheduling error for fmParallelRequests filters (all avisynth filters and several internal ones)
added a bit more documentation, this time a bit about python and the classes found there
added vsfs, a port of avfs
v210 output support, add enable_v210=True to use it
removed support for clips with unknown length from vfw
can now open files with unicode filenames in vfw
fixed some minor bugs and compiler warnings

r11:
switched the precompiled module to python 3.3
vfw now also has several frame requests going at once, this should make the throughput get close to clip.output()
vfw now returns some colorful bars on error because refusing to open crashes too many applications
vfw now has support for the P010, P016, P210, P216 formats, tested in mpc-hc with madvr
removed some stray debug prints

r10:
fixed an issue where python could deadlock on the GIL
now comes in an installer
added a skeleton filter and a heavily commented invert example filter to the sdk dir
added a vfw module
fixed slicing/indexing in python module
list_functions() can now be used on a namespace (core.resize.list_functions())
improved and documented build system, see INSTALL
other small fixes relating to the python bindings

r9:
to get around keyword conflicts all function arguments names can be specified with both name and _name (Loop(_clip=a) is the same as Loop(clip=a))
works under linux and probably osx too
full source released under LGPL
it is now possible to use + to splice clips and the slicing operator to perform Trim, Reverse and SelectEvery operations on a clip
documentation of all user functions
lots of included filter fixes
minor fixes to other things

r8:
portability fixes for linux
minor api additions to make filters that consume 20+ input frames/scan a whole clip feasible
added cpu state checks after filter calls
added a function type, plugins may now take a python function and evaluate it for every frame
implemented the final planned standard functions (transpose, croprel, clipselect, modifyprops)
fixed the huge memory leak in cropabs
other small fixes

r7:
includes the source for all of the std functions and the header needed to write plugins (more source coming soon)
unnamed arguments are now accepted
y4m headers now specify the colorspace for all yuv formats and gives an error when used with non-yuv
added a new B tag to y4m output that specifies the number of bits per sample (B8/B10/B16)
more minor fixes

r6:
now drops all crop calls to env->invoke(), fixes dgdecode compatibility but you have to crop yourself now
all 64bit issues fixed
added several checks to prevent the compat formats from being used by new filters
minor fixes and extra checks for everything

r5:
more python output fixes
added accept_lowercase as a setting for the core constructor
python module refinement, now all objects have a string representation with more information
other minor fixes

r4:
fixed the bad frame output from the python module
added a callback to the output function so progress can be reported
ported ffms2
raw frame data can be accessed from python

r3:
fixes even more threading and performance issues
adds special support for yuy2 and rgb32 so most avisynth filters should work
added hacks to make mvtools2 work

r2:
fixes a large number of threading issues
removed the stupid clip.vi.width thing in python, now it's simply clip.width
fixed the frame reordering in the python bindings, now frames pop out in the expected order

r1:
buggy first version




